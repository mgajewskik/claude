{
    "enableAllProjectMcpServers": true,
    "enabledMcpjsonServers": [
        "gemini-cli",
        "context7"
    ],
    "env": {
        "CLAUDE_BASH_MAINTAIN_PROJECT_WORKING_DIR": true
    },
    "permissions": {
        "allow": [
            "Read(**)",
            "Edit(**)",
            "MultiEdit(**)",
            "Write(**)",
            "Glob(**)",
            "Grep(**)",
            "LS(**)",
            "WebSearch(**)",
            "TodoRead()",
            "TodoWrite(**)",
            "Task(**)",
            "Bash(find:*)",
            "Bash(ls:*)",
            "Bash(rg:*)",
            "Bash(grep:*)",
            "Bash(sed:*)",
            "Bash(awk:*)",
            "Bash(jq:*)",
            "mcp__context7__resolve-library-id",
            "mcp__context7__get-library-docs",
            "mcp__gemini-cli__ask-gemini"
        ],
        "deny": [
            "Bash(rm -rf /*)",
            "Bash(rm -rf /)",
            "Bash(sudo rm -rf /*)",
            "Bash(sudo rm -rf /)",
            "Bash(dd if=/dev/zero of=/dev/*)",
            "Bash(dd if=/dev/random of=/dev/*)",
            "Bash(mkfs*)",
            "Bash(fdisk*)",
            "Bash(parted*)",
            "Bash(:(){ :|:& };:*)",
            "Bash(*fork*bomb*)",
            "Bash(> /dev/sda*)",
            "Bash(> /dev/nvme*)",
            "Bash(> /dev/sd*)",
            "Bash(cat /dev/urandom > *)",
            "Bash(* | nc -l*)",
            "Bash(* | netcat -l*)",
            "Bash(* | socat *)",
            "Bash(* | base64 -d | sh*)",
            "Bash(* | base64 -d | bash*)",
            "Bash(curl * | sh*)",
            "Bash(curl * | bash*)",
            "Bash(wget * | sh*)",
            "Bash(wget * | bash*)",
            "Bash(sudo passwd*)",
            "Bash(passwd*)",
            "Bash(sudo useradd*)",
            "Bash(sudo userdel*)",
            "Bash(sudo usermod*)",
            "Bash(sudo groupadd*)",
            "Bash(sudo groupdel*)",
            "Bash(sudo adduser*)",
            "Bash(sudo deluser*)",
            "Bash(sudo chmod 777 /*)",
            "Bash(sudo chown * /*)",
            "Bash(sudo rm /etc/*)",
            "Bash(sudo rm -rf /etc/*)",
            "Bash(sudo rm /bin/*)",
            "Bash(sudo rm /usr/*)",
            "Bash(sudo > /etc/*)",
            "Bash(nc -l*)",
            "Bash(netcat -l*)",
            "Bash(socat*)",
            "Bash(nmap*)",
            "Bash(masscan*)",
            "Bash(*xmrig*)",
            "Bash(*monero*)",
            "Bash(*bitcoin*)",
            "Bash(*miner*)",
            "Bash(git push --force origin master*)",
            "Bash(git push --force origin main*)",
            "Bash(git push -f origin master*)",
            "Bash(git push -f origin main*)",
            "Bash(git reset --hard origin/master*)",
            "Bash(git reset --hard origin/main*)",
            "Bash(env | base64*)",
            "Bash(printenv | base64*)",
            "Bash(set | base64*)",
            "Bash(bash -i >& /dev/tcp/*)",
            "Bash(sh -i >& /dev/tcp/*)",
            "Bash(python -c 'import socket*)",
            "Bash(php -r '$sock*)",
            "Bash(ruby -rsocket*)",
            "Bash(perl -e 'use Socket*)",
            "Bash(systemctl mask *)",
            "Bash(systemctl disable *)",
            "Bash(systemctl daemon-reload*)",
            "Bash(curl http://169.254.169.254/*)",
            "Bash(wget http://169.254.169.254/*)",
            "Bash(curl http://metadata.google.internal/*)",
            "Bash(exec < /dev/tcp/*)",
            "Bash(exec > /dev/tcp/*)",
            "Bash(exec 3<>/dev/tcp/*)",
            "Bash(history | grep -i password*)",
            "Bash(history | grep -i token*)",
            "Bash(history | grep -i secret*)",
            "Bash(history | grep -i key*)",
            "Bash(grep -r password /etc/*)",
            "Bash(grep -r token /etc/*)",
            "Bash(find / -name id_rsa*)",
            "Bash(find / -name *.key*)",
            "Bash(find / -name *.pem*)",
            "Bash(shutdown*)",
            "Bash(reboot*)",
            "Bash(halt*)",
            "Bash(poweroff*)",
            "Bash(init 0*)",
            "Bash(init 6*)",
            "Bash(sudo shutdown*)",
            "Bash(sudo reboot*)",
            "Bash(sudo ufw disable*)",
            "Bash(sudo iptables -F*)",
            "Bash(sudo iptables --flush*)",
            "Bash(sudo systemctl stop firewalld*)",
            "Bash(sudo service iptables stop*)",
            "Bash(curl * | sudo *)",
            "Bash(wget * | sudo *)",
            "Bash(curl -s * | sh*)",
            "Bash(wget -qO- * | sh*)",
            "Bash(rm /var/log/*)",
            "Bash(rm -rf /var/log/*)",
            "Bash(> /var/log/*)",
            "Bash(echo > /var/log/*)",
            "Bash(truncate -s 0 /var/log/*)",
            "Bash(npm install -g * --unsafe-perm*)",
            "Bash(pip install * --break-system-packages*)",
            "Bash(gem install * --no-user-install*)",
            "Bash(insmod *)",
            "Bash(rmmod *)",
            "Bash(modprobe *)",
            "Bash(sysctl -w *)",
            "Bash(chmod -R 777 /*)",
            "Bash(chmod 777 /etc/*)",
            "Bash(chmod 777 /bin/*)",
            "Bash(chmod 777 /usr/*)",
            "Bash(chown -R * /*)",
            "Bash(*bitcoin-cli*)",
            "Bash(*ethereum*)",
            "Bash(*wallet.dat*)",
            "Bash(*privatekey*)",
            "Bash(find / -type f -delete*)",
            "Bash(find / -type d -delete*)",
            "Bash(rm -rf /home/*)",
            "Bash(rm -rf /var/*)",
            "Bash(rm -rf /opt/*)",
            "Bash(gdb -p *)",
            "Bash(ptrace *)",
            "Bash(LD_PRELOAD=*)",
            "Bash(export PATH=*)",
            "Bash(export LD_LIBRARY_PATH=*)",
            "Bash(export PYTHONPATH=*)",
            "Bash(sudo *)"
        ]
    }
}
